// @generated by protobuf-ts 2.7.0 with parameter long_type_string
// @generated from protobuf file "kite/plugins/v1/service.proto" (package "kite.plugins.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PluginVersion } from "./version";
import { PluginTag } from "./plugin";
import { Plugin } from "./plugin";
// @generated message type with reflection information, may provide speed optimized methods
class GetPluginRequest$Type extends MessageType {
    constructor() {
        super("kite.plugins.v1.GetPluginRequest", [
            { no: 1, name: "id", kind: "scalar", T: 6 /*ScalarType.FIXED64*/ }
        ]);
    }
    create(value) {
        const message = { id: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* fixed64 id */ 1:
                    message.id = reader.fixed64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* fixed64 id = 1; */
        if (message.id !== "0")
            writer.tag(1, WireType.Bit64).fixed64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.plugins.v1.GetPluginRequest
 */
export const GetPluginRequest = new GetPluginRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPluginResponse$Type extends MessageType {
    constructor() {
        super("kite.plugins.v1.GetPluginResponse", [
            { no: 1, name: "plugin", kind: "message", T: () => Plugin }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* kite.plugins.v1.Plugin plugin */ 1:
                    message.plugin = Plugin.internalBinaryRead(reader, reader.uint32(), options, message.plugin);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* kite.plugins.v1.Plugin plugin = 1; */
        if (message.plugin)
            Plugin.internalBinaryWrite(message.plugin, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.plugins.v1.GetPluginResponse
 */
export const GetPluginResponse = new GetPluginResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListPluginsRequest$Type extends MessageType {
    constructor() {
        super("kite.plugins.v1.ListPluginsRequest", [
            { no: 1, name: "limit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "skip", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "tags", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["kite.plugins.v1.PluginTag", PluginTag, "PLUGIN_TAG_"] },
            { no: 4, name: "text_search", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { tags: [], textSearch: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 limit */ 1:
                    message.limit = reader.uint32();
                    break;
                case /* optional uint32 skip */ 2:
                    message.skip = reader.uint32();
                    break;
                case /* repeated kite.plugins.v1.PluginTag tags */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.tags.push(reader.int32());
                    else
                        message.tags.push(reader.int32());
                    break;
                case /* string text_search */ 4:
                    message.textSearch = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 limit = 1; */
        if (message.limit !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.limit);
        /* optional uint32 skip = 2; */
        if (message.skip !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.skip);
        /* repeated kite.plugins.v1.PluginTag tags = 3; */
        if (message.tags.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.tags.length; i++)
                writer.int32(message.tags[i]);
            writer.join();
        }
        /* string text_search = 4; */
        if (message.textSearch !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.textSearch);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.plugins.v1.ListPluginsRequest
 */
export const ListPluginsRequest = new ListPluginsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListPluginsResponse$Type extends MessageType {
    constructor() {
        super("kite.plugins.v1.ListPluginsResponse", [
            { no: 1, name: "total", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "plugins", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Plugin }
        ]);
    }
    create(value) {
        const message = { total: 0, plugins: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 total */ 1:
                    message.total = reader.uint32();
                    break;
                case /* repeated kite.plugins.v1.Plugin plugins */ 2:
                    message.plugins.push(Plugin.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* uint32 total = 1; */
        if (message.total !== 0)
            writer.tag(1, WireType.Varint).uint32(message.total);
        /* repeated kite.plugins.v1.Plugin plugins = 2; */
        for (let i = 0; i < message.plugins.length; i++)
            Plugin.internalBinaryWrite(message.plugins[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.plugins.v1.ListPluginsResponse
 */
export const ListPluginsResponse = new ListPluginsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePluginRequest$Type extends MessageType {
    constructor() {
        super("kite.plugins.v1.CreatePluginRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "short_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "long_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "tags", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["kite.plugins.v1.PluginTag", PluginTag, "PLUGIN_TAG_"] }
        ]);
    }
    create(value) {
        const message = { name: "", shortDescription: "", longDescription: "", tags: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string short_description */ 2:
                    message.shortDescription = reader.string();
                    break;
                case /* string long_description */ 3:
                    message.longDescription = reader.string();
                    break;
                case /* repeated kite.plugins.v1.PluginTag tags */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.tags.push(reader.int32());
                    else
                        message.tags.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string short_description = 2; */
        if (message.shortDescription !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.shortDescription);
        /* string long_description = 3; */
        if (message.longDescription !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.longDescription);
        /* repeated kite.plugins.v1.PluginTag tags = 4; */
        if (message.tags.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.tags.length; i++)
                writer.int32(message.tags[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.plugins.v1.CreatePluginRequest
 */
export const CreatePluginRequest = new CreatePluginRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePluginResponse$Type extends MessageType {
    constructor() {
        super("kite.plugins.v1.CreatePluginResponse", [
            { no: 1, name: "plugin", kind: "message", T: () => Plugin }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* kite.plugins.v1.Plugin plugin */ 1:
                    message.plugin = Plugin.internalBinaryRead(reader, reader.uint32(), options, message.plugin);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* kite.plugins.v1.Plugin plugin = 1; */
        if (message.plugin)
            Plugin.internalBinaryWrite(message.plugin, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.plugins.v1.CreatePluginResponse
 */
export const CreatePluginResponse = new CreatePluginResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePluginRequest$Type extends MessageType {
    constructor() {
        super("kite.plugins.v1.UpdatePluginRequest", [
            { no: 1, name: "id", kind: "scalar", T: 6 /*ScalarType.FIXED64*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "short_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "long_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "tags", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["kite.plugins.v1.PluginTag", PluginTag, "PLUGIN_TAG_"] }
        ]);
    }
    create(value) {
        const message = { id: "0", name: "", shortDescription: "", longDescription: "", tags: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* fixed64 id */ 1:
                    message.id = reader.fixed64().toString();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string short_description */ 3:
                    message.shortDescription = reader.string();
                    break;
                case /* string long_description */ 4:
                    message.longDescription = reader.string();
                    break;
                case /* repeated kite.plugins.v1.PluginTag tags */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.tags.push(reader.int32());
                    else
                        message.tags.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* fixed64 id = 1; */
        if (message.id !== "0")
            writer.tag(1, WireType.Bit64).fixed64(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string short_description = 3; */
        if (message.shortDescription !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.shortDescription);
        /* string long_description = 4; */
        if (message.longDescription !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.longDescription);
        /* repeated kite.plugins.v1.PluginTag tags = 5; */
        if (message.tags.length) {
            writer.tag(5, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.tags.length; i++)
                writer.int32(message.tags[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.plugins.v1.UpdatePluginRequest
 */
export const UpdatePluginRequest = new UpdatePluginRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePluginResponse$Type extends MessageType {
    constructor() {
        super("kite.plugins.v1.UpdatePluginResponse", [
            { no: 1, name: "plugin", kind: "message", T: () => Plugin }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* kite.plugins.v1.Plugin plugin */ 1:
                    message.plugin = Plugin.internalBinaryRead(reader, reader.uint32(), options, message.plugin);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* kite.plugins.v1.Plugin plugin = 1; */
        if (message.plugin)
            Plugin.internalBinaryWrite(message.plugin, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.plugins.v1.UpdatePluginResponse
 */
export const UpdatePluginResponse = new UpdatePluginResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeletePluginRequest$Type extends MessageType {
    constructor() {
        super("kite.plugins.v1.DeletePluginRequest", [
            { no: 1, name: "id", kind: "scalar", T: 6 /*ScalarType.FIXED64*/ }
        ]);
    }
    create(value) {
        const message = { id: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* fixed64 id */ 1:
                    message.id = reader.fixed64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* fixed64 id = 1; */
        if (message.id !== "0")
            writer.tag(1, WireType.Bit64).fixed64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.plugins.v1.DeletePluginRequest
 */
export const DeletePluginRequest = new DeletePluginRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeletePluginResponse$Type extends MessageType {
    constructor() {
        super("kite.plugins.v1.DeletePluginResponse", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.plugins.v1.DeletePluginResponse
 */
export const DeletePluginResponse = new DeletePluginResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListPluginVersionsRequest$Type extends MessageType {
    constructor() {
        super("kite.plugins.v1.ListPluginVersionsRequest", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.plugins.v1.ListPluginVersionsRequest
 */
export const ListPluginVersionsRequest = new ListPluginVersionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListPluginVersionsResponse$Type extends MessageType {
    constructor() {
        super("kite.plugins.v1.ListPluginVersionsResponse", [
            { no: 1, name: "versions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PluginVersion }
        ]);
    }
    create(value) {
        const message = { versions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated kite.plugins.v1.PluginVersion versions */ 1:
                    message.versions.push(PluginVersion.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated kite.plugins.v1.PluginVersion versions = 1; */
        for (let i = 0; i < message.versions.length; i++)
            PluginVersion.internalBinaryWrite(message.versions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.plugins.v1.ListPluginVersionsResponse
 */
export const ListPluginVersionsResponse = new ListPluginVersionsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePluginVersionRequest$Type extends MessageType {
    constructor() {
        super("kite.plugins.v1.CreatePluginVersionRequest", [
            { no: 1, name: "tag", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "module", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value) {
        const message = { tag: "", description: "", module: new Uint8Array(0) };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string tag */ 1:
                    message.tag = reader.string();
                    break;
                case /* string description */ 3:
                    message.description = reader.string();
                    break;
                case /* bytes module */ 4:
                    message.module = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* string tag = 1; */
        if (message.tag !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tag);
        /* string description = 3; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* bytes module = 4; */
        if (message.module.length)
            writer.tag(4, WireType.LengthDelimited).bytes(message.module);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.plugins.v1.CreatePluginVersionRequest
 */
export const CreatePluginVersionRequest = new CreatePluginVersionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreatePluginVersionResponse$Type extends MessageType {
    constructor() {
        super("kite.plugins.v1.CreatePluginVersionResponse", [
            { no: 1, name: "version", kind: "message", T: () => PluginVersion }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* kite.plugins.v1.PluginVersion version */ 1:
                    message.version = PluginVersion.internalBinaryRead(reader, reader.uint32(), options, message.version);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* kite.plugins.v1.PluginVersion version = 1; */
        if (message.version)
            PluginVersion.internalBinaryWrite(message.version, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.plugins.v1.CreatePluginVersionResponse
 */
export const CreatePluginVersionResponse = new CreatePluginVersionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeletePluginVersionRequest$Type extends MessageType {
    constructor() {
        super("kite.plugins.v1.DeletePluginVersionRequest", [
            { no: 1, name: "id", kind: "scalar", T: 6 /*ScalarType.FIXED64*/ }
        ]);
    }
    create(value) {
        const message = { id: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* fixed64 id */ 1:
                    message.id = reader.fixed64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* fixed64 id = 1; */
        if (message.id !== "0")
            writer.tag(1, WireType.Bit64).fixed64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.plugins.v1.DeletePluginVersionRequest
 */
export const DeletePluginVersionRequest = new DeletePluginVersionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeletePluginVersionResponse$Type extends MessageType {
    constructor() {
        super("kite.plugins.v1.DeletePluginVersionResponse", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target !== null && target !== void 0 ? target : this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.plugins.v1.DeletePluginVersionResponse
 */
export const DeletePluginVersionResponse = new DeletePluginVersionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePluginVersionRequest$Type extends MessageType {
    constructor() {
        super("kite.plugins.v1.UpdatePluginVersionRequest", [
            { no: 1, name: "id", kind: "scalar", T: 6 /*ScalarType.FIXED64*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { id: "0", description: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* fixed64 id */ 1:
                    message.id = reader.fixed64().toString();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* fixed64 id = 1; */
        if (message.id !== "0")
            writer.tag(1, WireType.Bit64).fixed64(message.id);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.plugins.v1.UpdatePluginVersionRequest
 */
export const UpdatePluginVersionRequest = new UpdatePluginVersionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePluginVersionResponse$Type extends MessageType {
    constructor() {
        super("kite.plugins.v1.UpdatePluginVersionResponse", [
            { no: 1, name: "version", kind: "message", T: () => PluginVersion }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* kite.plugins.v1.PluginVersion version */ 1:
                    message.version = PluginVersion.internalBinaryRead(reader, reader.uint32(), options, message.version);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* kite.plugins.v1.PluginVersion version = 1; */
        if (message.version)
            PluginVersion.internalBinaryWrite(message.version, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.plugins.v1.UpdatePluginVersionResponse
 */
export const UpdatePluginVersionResponse = new UpdatePluginVersionResponse$Type();
/**
 * @generated ServiceType for protobuf service kite.plugins.v1.PluginService
 */
export const PluginService = new ServiceType("kite.plugins.v1.PluginService", [
    { name: "GetPlugin", options: {}, I: GetPluginRequest, O: GetPluginResponse },
    { name: "ListPlugins", options: {}, I: ListPluginsRequest, O: ListPluginsResponse },
    { name: "CreatePlugin", options: {}, I: CreatePluginRequest, O: CreatePluginResponse },
    { name: "UpdatePlugin", options: {}, I: UpdatePluginRequest, O: UpdatePluginResponse },
    { name: "DeletePlugin", options: {}, I: DeletePluginRequest, O: DeletePluginResponse },
    { name: "ListPluginVersions", options: {}, I: ListPluginVersionsRequest, O: ListPluginVersionsResponse },
    { name: "CreatePluginVersion", options: {}, I: CreatePluginVersionRequest, O: CreatePluginVersionResponse },
    { name: "DeletePluginVersion", options: {}, I: DeletePluginVersionRequest, O: DeletePluginVersionResponse },
    { name: "UpdatePluginVersion", options: {}, I: UpdatePluginVersionRequest, O: UpdatePluginVersionResponse }
]);
