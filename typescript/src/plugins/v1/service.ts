// @generated by protobuf-ts 2.7.0 with parameter long_type_string
// @generated from protobuf file "plugins/v1/service.proto" (package "plugins.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message plugins.v1.GetPluginRequest
 */
export interface GetPluginRequest {
}
/**
 * @generated from protobuf message plugins.v1.GetPluginResponse
 */
export interface GetPluginResponse {
}
// @generated message type with reflection information, may provide speed optimized methods
class GetPluginRequest$Type extends MessageType<GetPluginRequest> {
    constructor() {
        super("plugins.v1.GetPluginRequest", []);
    }
    create(value?: PartialMessage<GetPluginRequest>): GetPluginRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetPluginRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPluginRequest): GetPluginRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetPluginRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message plugins.v1.GetPluginRequest
 */
export const GetPluginRequest = new GetPluginRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPluginResponse$Type extends MessageType<GetPluginResponse> {
    constructor() {
        super("plugins.v1.GetPluginResponse", []);
    }
    create(value?: PartialMessage<GetPluginResponse>): GetPluginResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetPluginResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPluginResponse): GetPluginResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetPluginResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message plugins.v1.GetPluginResponse
 */
export const GetPluginResponse = new GetPluginResponse$Type();
/**
 * @generated ServiceType for protobuf service plugins.v1.PluginService
 */
export const PluginService = new ServiceType("plugins.v1.PluginService", [
    { name: "GetPlugin", options: {}, I: GetPluginRequest, O: GetPluginResponse }
]);
