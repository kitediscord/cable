// @generated by protobuf-ts 2.7.0 with parameter long_type_string
// @generated from protobuf file "plugins/v1/service.proto" (package "plugins.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { PluginService } from "./service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetPluginResponse } from "./service";
import type { GetPluginRequest } from "./service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service plugins.v1.PluginService
 */
export interface IPluginServiceClient {
    /**
     * @generated from protobuf rpc: GetPlugin(plugins.v1.GetPluginRequest) returns (plugins.v1.GetPluginResponse);
     */
    getPlugin(input: GetPluginRequest, options?: RpcOptions): UnaryCall<GetPluginRequest, GetPluginResponse>;
}
/**
 * @generated from protobuf service plugins.v1.PluginService
 */
export class PluginServiceClient implements IPluginServiceClient, ServiceInfo {
    typeName = PluginService.typeName;
    methods = PluginService.methods;
    options = PluginService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetPlugin(plugins.v1.GetPluginRequest) returns (plugins.v1.GetPluginResponse);
     */
    getPlugin(input: GetPluginRequest, options?: RpcOptions): UnaryCall<GetPluginRequest, GetPluginResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetPluginRequest, GetPluginResponse>("unary", this._transport, method, opt, input);
    }
}
