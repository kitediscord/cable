// @generated by protobuf-ts 2.7.0 with parameter long_type_string
// @generated from protobuf file "kite/engine/v1/service.proto" (package "kite.engine.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { EngineService } from "./service";
import type { StreamDeploymentLogsResponse } from "./service";
import type { StreamDeploymentLogsRequest } from "./service";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { GetDeploymentResponse } from "./service";
import type { GetDeploymentRequest } from "./service";
import type { ListDeploymentsResponse } from "./service";
import type { ListDeploymentsRequest } from "./service";
import type { DeleteDeploymentResponse } from "./service";
import type { DeleteDeploymentRequest } from "./service";
import type { UpdateDeploymentResponse } from "./service";
import type { UpdateDeploymentRequest } from "./service";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateDeploymentResponse } from "./service";
import type { CreateDeploymentRequest } from "./service";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service kite.engine.v1.EngineService
 */
export interface IEngineServiceClient {
    /**
     * @generated from protobuf rpc: CreateDeployment(kite.engine.v1.CreateDeploymentRequest) returns (kite.engine.v1.CreateDeploymentResponse);
     */
    createDeployment(input: CreateDeploymentRequest, options?: RpcOptions): UnaryCall<CreateDeploymentRequest, CreateDeploymentResponse>;
    /**
     * @generated from protobuf rpc: UpdateDeployment(kite.engine.v1.UpdateDeploymentRequest) returns (kite.engine.v1.UpdateDeploymentResponse);
     */
    updateDeployment(input: UpdateDeploymentRequest, options?: RpcOptions): UnaryCall<UpdateDeploymentRequest, UpdateDeploymentResponse>;
    /**
     * @generated from protobuf rpc: DeleteDeployment(kite.engine.v1.DeleteDeploymentRequest) returns (kite.engine.v1.DeleteDeploymentResponse);
     */
    deleteDeployment(input: DeleteDeploymentRequest, options?: RpcOptions): UnaryCall<DeleteDeploymentRequest, DeleteDeploymentResponse>;
    /**
     * @generated from protobuf rpc: ListDeployments(kite.engine.v1.ListDeploymentsRequest) returns (kite.engine.v1.ListDeploymentsResponse);
     */
    listDeployments(input: ListDeploymentsRequest, options?: RpcOptions): UnaryCall<ListDeploymentsRequest, ListDeploymentsResponse>;
    /**
     * @generated from protobuf rpc: GetDeployment(kite.engine.v1.GetDeploymentRequest) returns (kite.engine.v1.GetDeploymentResponse);
     */
    getDeployment(input: GetDeploymentRequest, options?: RpcOptions): UnaryCall<GetDeploymentRequest, GetDeploymentResponse>;
    /**
     * @generated from protobuf rpc: StreamDeploymentLogs(kite.engine.v1.StreamDeploymentLogsRequest) returns (stream kite.engine.v1.StreamDeploymentLogsResponse);
     */
    streamDeploymentLogs(input: StreamDeploymentLogsRequest, options?: RpcOptions): ServerStreamingCall<StreamDeploymentLogsRequest, StreamDeploymentLogsResponse>;
}
/**
 * @generated from protobuf service kite.engine.v1.EngineService
 */
export class EngineServiceClient implements IEngineServiceClient, ServiceInfo {
    typeName = EngineService.typeName;
    methods = EngineService.methods;
    options = EngineService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateDeployment(kite.engine.v1.CreateDeploymentRequest) returns (kite.engine.v1.CreateDeploymentResponse);
     */
    createDeployment(input: CreateDeploymentRequest, options?: RpcOptions): UnaryCall<CreateDeploymentRequest, CreateDeploymentResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateDeploymentRequest, CreateDeploymentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateDeployment(kite.engine.v1.UpdateDeploymentRequest) returns (kite.engine.v1.UpdateDeploymentResponse);
     */
    updateDeployment(input: UpdateDeploymentRequest, options?: RpcOptions): UnaryCall<UpdateDeploymentRequest, UpdateDeploymentResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateDeploymentRequest, UpdateDeploymentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteDeployment(kite.engine.v1.DeleteDeploymentRequest) returns (kite.engine.v1.DeleteDeploymentResponse);
     */
    deleteDeployment(input: DeleteDeploymentRequest, options?: RpcOptions): UnaryCall<DeleteDeploymentRequest, DeleteDeploymentResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteDeploymentRequest, DeleteDeploymentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListDeployments(kite.engine.v1.ListDeploymentsRequest) returns (kite.engine.v1.ListDeploymentsResponse);
     */
    listDeployments(input: ListDeploymentsRequest, options?: RpcOptions): UnaryCall<ListDeploymentsRequest, ListDeploymentsResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListDeploymentsRequest, ListDeploymentsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetDeployment(kite.engine.v1.GetDeploymentRequest) returns (kite.engine.v1.GetDeploymentResponse);
     */
    getDeployment(input: GetDeploymentRequest, options?: RpcOptions): UnaryCall<GetDeploymentRequest, GetDeploymentResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetDeploymentRequest, GetDeploymentResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: StreamDeploymentLogs(kite.engine.v1.StreamDeploymentLogsRequest) returns (stream kite.engine.v1.StreamDeploymentLogsResponse);
     */
    streamDeploymentLogs(input: StreamDeploymentLogsRequest, options?: RpcOptions): ServerStreamingCall<StreamDeploymentLogsRequest, StreamDeploymentLogsResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<StreamDeploymentLogsRequest, StreamDeploymentLogsResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
