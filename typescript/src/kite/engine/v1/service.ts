// @generated by protobuf-ts 2.7.0 with parameter long_type_string
// @generated from protobuf file "kite/engine/v1/service.proto" (package "kite.engine.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { DeploymentLogEntry } from "./deployment";
import { Deployment } from "./deployment";
/**
 * @generated from protobuf message kite.engine.v1.CreateDeploymentRequest
 */
export interface CreateDeploymentRequest {
    /**
     * @generated from protobuf field: fixed64 guild_id = 1;
     */
    guildId: string;
    /**
     * @generated from protobuf field: fixed64 plugin_id = 2;
     */
    pluginId: string;
    /**
     * @generated from protobuf field: fixed64 plugin_version_id = 3;
     */
    pluginVersionId: string;
    /**
     * @generated from protobuf field: bool enabled = 4;
     */
    enabled: boolean;
}
/**
 * @generated from protobuf message kite.engine.v1.CreateDeploymentResponse
 */
export interface CreateDeploymentResponse {
    /**
     * @generated from protobuf field: kite.engine.v1.Deployment deployment = 1;
     */
    deployment?: Deployment;
}
/**
 * @generated from protobuf message kite.engine.v1.UpdateDeploymentRequest
 */
export interface UpdateDeploymentRequest {
    /**
     * @generated from protobuf field: fixed64 guild_id = 1;
     */
    guildId: string;
    /**
     * @generated from protobuf field: fixed64 plugin_id = 2;
     */
    pluginId: string;
    /**
     * @generated from protobuf field: fixed64 plugin_version_id = 3;
     */
    pluginVersionId: string;
    /**
     * @generated from protobuf field: bool enabled = 4;
     */
    enabled: boolean;
}
/**
 * @generated from protobuf message kite.engine.v1.UpdateDeploymentResponse
 */
export interface UpdateDeploymentResponse {
    /**
     * @generated from protobuf field: kite.engine.v1.Deployment deployment = 1;
     */
    deployment?: Deployment;
}
/**
 * @generated from protobuf message kite.engine.v1.DeleteDeploymentRequest
 */
export interface DeleteDeploymentRequest {
    /**
     * @generated from protobuf field: fixed64 guild_id = 1;
     */
    guildId: string;
    /**
     * @generated from protobuf field: fixed64 plugin_id = 2;
     */
    pluginId: string;
}
/**
 * @generated from protobuf message kite.engine.v1.DeleteDeploymentResponse
 */
export interface DeleteDeploymentResponse {
}
/**
 * @generated from protobuf message kite.engine.v1.ListDeploymentsRequest
 */
export interface ListDeploymentsRequest {
    /**
     * @generated from protobuf field: fixed64 guild_id = 1;
     */
    guildId: string;
}
/**
 * @generated from protobuf message kite.engine.v1.ListDeploymentsResponse
 */
export interface ListDeploymentsResponse {
    /**
     * @generated from protobuf field: repeated kite.engine.v1.Deployment deployments = 1;
     */
    deployments: Deployment[];
}
/**
 * @generated from protobuf message kite.engine.v1.GetDeploymentRequest
 */
export interface GetDeploymentRequest {
    /**
     * @generated from protobuf field: fixed64 guild_id = 1;
     */
    guildId: string;
    /**
     * @generated from protobuf field: fixed64 plugin_id = 2;
     */
    pluginId: string;
}
/**
 * @generated from protobuf message kite.engine.v1.GetDeploymentResponse
 */
export interface GetDeploymentResponse {
    /**
     * @generated from protobuf field: kite.engine.v1.Deployment deployment = 1;
     */
    deployment?: Deployment;
}
/**
 * @generated from protobuf message kite.engine.v1.StreamDeploymentLogsRequest
 */
export interface StreamDeploymentLogsRequest {
    /**
     * @generated from protobuf field: fixed64 guild_id = 1;
     */
    guildId: string;
    /**
     * @generated from protobuf field: fixed64 plugin_id = 2;
     */
    pluginId: string;
    /**
     * @generated from protobuf field: optional bool replay = 3;
     */
    replay?: boolean;
}
/**
 * @generated from protobuf message kite.engine.v1.StreamDeploymentLogsResponse
 */
export interface StreamDeploymentLogsResponse {
    /**
     * @generated from protobuf field: kite.engine.v1.DeploymentLogEntry entry = 1;
     */
    entry?: DeploymentLogEntry;
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateDeploymentRequest$Type extends MessageType<CreateDeploymentRequest> {
    constructor() {
        super("kite.engine.v1.CreateDeploymentRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 6 /*ScalarType.FIXED64*/ },
            { no: 2, name: "plugin_id", kind: "scalar", T: 6 /*ScalarType.FIXED64*/ },
            { no: 3, name: "plugin_version_id", kind: "scalar", T: 6 /*ScalarType.FIXED64*/ },
            { no: 4, name: "enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CreateDeploymentRequest>): CreateDeploymentRequest {
        const message = { guildId: "0", pluginId: "0", pluginVersionId: "0", enabled: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateDeploymentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateDeploymentRequest): CreateDeploymentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* fixed64 guild_id */ 1:
                    message.guildId = reader.fixed64().toString();
                    break;
                case /* fixed64 plugin_id */ 2:
                    message.pluginId = reader.fixed64().toString();
                    break;
                case /* fixed64 plugin_version_id */ 3:
                    message.pluginVersionId = reader.fixed64().toString();
                    break;
                case /* bool enabled */ 4:
                    message.enabled = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateDeploymentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* fixed64 guild_id = 1; */
        if (message.guildId !== "0")
            writer.tag(1, WireType.Bit64).fixed64(message.guildId);
        /* fixed64 plugin_id = 2; */
        if (message.pluginId !== "0")
            writer.tag(2, WireType.Bit64).fixed64(message.pluginId);
        /* fixed64 plugin_version_id = 3; */
        if (message.pluginVersionId !== "0")
            writer.tag(3, WireType.Bit64).fixed64(message.pluginVersionId);
        /* bool enabled = 4; */
        if (message.enabled !== false)
            writer.tag(4, WireType.Varint).bool(message.enabled);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.engine.v1.CreateDeploymentRequest
 */
export const CreateDeploymentRequest = new CreateDeploymentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateDeploymentResponse$Type extends MessageType<CreateDeploymentResponse> {
    constructor() {
        super("kite.engine.v1.CreateDeploymentResponse", [
            { no: 1, name: "deployment", kind: "message", T: () => Deployment }
        ]);
    }
    create(value?: PartialMessage<CreateDeploymentResponse>): CreateDeploymentResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateDeploymentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateDeploymentResponse): CreateDeploymentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* kite.engine.v1.Deployment deployment */ 1:
                    message.deployment = Deployment.internalBinaryRead(reader, reader.uint32(), options, message.deployment);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateDeploymentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* kite.engine.v1.Deployment deployment = 1; */
        if (message.deployment)
            Deployment.internalBinaryWrite(message.deployment, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.engine.v1.CreateDeploymentResponse
 */
export const CreateDeploymentResponse = new CreateDeploymentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateDeploymentRequest$Type extends MessageType<UpdateDeploymentRequest> {
    constructor() {
        super("kite.engine.v1.UpdateDeploymentRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 6 /*ScalarType.FIXED64*/ },
            { no: 2, name: "plugin_id", kind: "scalar", T: 6 /*ScalarType.FIXED64*/ },
            { no: 3, name: "plugin_version_id", kind: "scalar", T: 6 /*ScalarType.FIXED64*/ },
            { no: 4, name: "enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateDeploymentRequest>): UpdateDeploymentRequest {
        const message = { guildId: "0", pluginId: "0", pluginVersionId: "0", enabled: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateDeploymentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateDeploymentRequest): UpdateDeploymentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* fixed64 guild_id */ 1:
                    message.guildId = reader.fixed64().toString();
                    break;
                case /* fixed64 plugin_id */ 2:
                    message.pluginId = reader.fixed64().toString();
                    break;
                case /* fixed64 plugin_version_id */ 3:
                    message.pluginVersionId = reader.fixed64().toString();
                    break;
                case /* bool enabled */ 4:
                    message.enabled = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateDeploymentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* fixed64 guild_id = 1; */
        if (message.guildId !== "0")
            writer.tag(1, WireType.Bit64).fixed64(message.guildId);
        /* fixed64 plugin_id = 2; */
        if (message.pluginId !== "0")
            writer.tag(2, WireType.Bit64).fixed64(message.pluginId);
        /* fixed64 plugin_version_id = 3; */
        if (message.pluginVersionId !== "0")
            writer.tag(3, WireType.Bit64).fixed64(message.pluginVersionId);
        /* bool enabled = 4; */
        if (message.enabled !== false)
            writer.tag(4, WireType.Varint).bool(message.enabled);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.engine.v1.UpdateDeploymentRequest
 */
export const UpdateDeploymentRequest = new UpdateDeploymentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateDeploymentResponse$Type extends MessageType<UpdateDeploymentResponse> {
    constructor() {
        super("kite.engine.v1.UpdateDeploymentResponse", [
            { no: 1, name: "deployment", kind: "message", T: () => Deployment }
        ]);
    }
    create(value?: PartialMessage<UpdateDeploymentResponse>): UpdateDeploymentResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateDeploymentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateDeploymentResponse): UpdateDeploymentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* kite.engine.v1.Deployment deployment */ 1:
                    message.deployment = Deployment.internalBinaryRead(reader, reader.uint32(), options, message.deployment);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateDeploymentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* kite.engine.v1.Deployment deployment = 1; */
        if (message.deployment)
            Deployment.internalBinaryWrite(message.deployment, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.engine.v1.UpdateDeploymentResponse
 */
export const UpdateDeploymentResponse = new UpdateDeploymentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteDeploymentRequest$Type extends MessageType<DeleteDeploymentRequest> {
    constructor() {
        super("kite.engine.v1.DeleteDeploymentRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 6 /*ScalarType.FIXED64*/ },
            { no: 2, name: "plugin_id", kind: "scalar", T: 6 /*ScalarType.FIXED64*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteDeploymentRequest>): DeleteDeploymentRequest {
        const message = { guildId: "0", pluginId: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteDeploymentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteDeploymentRequest): DeleteDeploymentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* fixed64 guild_id */ 1:
                    message.guildId = reader.fixed64().toString();
                    break;
                case /* fixed64 plugin_id */ 2:
                    message.pluginId = reader.fixed64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteDeploymentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* fixed64 guild_id = 1; */
        if (message.guildId !== "0")
            writer.tag(1, WireType.Bit64).fixed64(message.guildId);
        /* fixed64 plugin_id = 2; */
        if (message.pluginId !== "0")
            writer.tag(2, WireType.Bit64).fixed64(message.pluginId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.engine.v1.DeleteDeploymentRequest
 */
export const DeleteDeploymentRequest = new DeleteDeploymentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteDeploymentResponse$Type extends MessageType<DeleteDeploymentResponse> {
    constructor() {
        super("kite.engine.v1.DeleteDeploymentResponse", []);
    }
    create(value?: PartialMessage<DeleteDeploymentResponse>): DeleteDeploymentResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteDeploymentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteDeploymentResponse): DeleteDeploymentResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeleteDeploymentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.engine.v1.DeleteDeploymentResponse
 */
export const DeleteDeploymentResponse = new DeleteDeploymentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDeploymentsRequest$Type extends MessageType<ListDeploymentsRequest> {
    constructor() {
        super("kite.engine.v1.ListDeploymentsRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 6 /*ScalarType.FIXED64*/ }
        ]);
    }
    create(value?: PartialMessage<ListDeploymentsRequest>): ListDeploymentsRequest {
        const message = { guildId: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListDeploymentsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDeploymentsRequest): ListDeploymentsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* fixed64 guild_id */ 1:
                    message.guildId = reader.fixed64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDeploymentsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* fixed64 guild_id = 1; */
        if (message.guildId !== "0")
            writer.tag(1, WireType.Bit64).fixed64(message.guildId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.engine.v1.ListDeploymentsRequest
 */
export const ListDeploymentsRequest = new ListDeploymentsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDeploymentsResponse$Type extends MessageType<ListDeploymentsResponse> {
    constructor() {
        super("kite.engine.v1.ListDeploymentsResponse", [
            { no: 1, name: "deployments", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Deployment }
        ]);
    }
    create(value?: PartialMessage<ListDeploymentsResponse>): ListDeploymentsResponse {
        const message = { deployments: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListDeploymentsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDeploymentsResponse): ListDeploymentsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated kite.engine.v1.Deployment deployments */ 1:
                    message.deployments.push(Deployment.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDeploymentsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated kite.engine.v1.Deployment deployments = 1; */
        for (let i = 0; i < message.deployments.length; i++)
            Deployment.internalBinaryWrite(message.deployments[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.engine.v1.ListDeploymentsResponse
 */
export const ListDeploymentsResponse = new ListDeploymentsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDeploymentRequest$Type extends MessageType<GetDeploymentRequest> {
    constructor() {
        super("kite.engine.v1.GetDeploymentRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 6 /*ScalarType.FIXED64*/ },
            { no: 2, name: "plugin_id", kind: "scalar", T: 6 /*ScalarType.FIXED64*/ }
        ]);
    }
    create(value?: PartialMessage<GetDeploymentRequest>): GetDeploymentRequest {
        const message = { guildId: "0", pluginId: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetDeploymentRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDeploymentRequest): GetDeploymentRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* fixed64 guild_id */ 1:
                    message.guildId = reader.fixed64().toString();
                    break;
                case /* fixed64 plugin_id */ 2:
                    message.pluginId = reader.fixed64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDeploymentRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* fixed64 guild_id = 1; */
        if (message.guildId !== "0")
            writer.tag(1, WireType.Bit64).fixed64(message.guildId);
        /* fixed64 plugin_id = 2; */
        if (message.pluginId !== "0")
            writer.tag(2, WireType.Bit64).fixed64(message.pluginId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.engine.v1.GetDeploymentRequest
 */
export const GetDeploymentRequest = new GetDeploymentRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDeploymentResponse$Type extends MessageType<GetDeploymentResponse> {
    constructor() {
        super("kite.engine.v1.GetDeploymentResponse", [
            { no: 1, name: "deployment", kind: "message", T: () => Deployment }
        ]);
    }
    create(value?: PartialMessage<GetDeploymentResponse>): GetDeploymentResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetDeploymentResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDeploymentResponse): GetDeploymentResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* kite.engine.v1.Deployment deployment */ 1:
                    message.deployment = Deployment.internalBinaryRead(reader, reader.uint32(), options, message.deployment);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDeploymentResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* kite.engine.v1.Deployment deployment = 1; */
        if (message.deployment)
            Deployment.internalBinaryWrite(message.deployment, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.engine.v1.GetDeploymentResponse
 */
export const GetDeploymentResponse = new GetDeploymentResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamDeploymentLogsRequest$Type extends MessageType<StreamDeploymentLogsRequest> {
    constructor() {
        super("kite.engine.v1.StreamDeploymentLogsRequest", [
            { no: 1, name: "guild_id", kind: "scalar", T: 6 /*ScalarType.FIXED64*/ },
            { no: 2, name: "plugin_id", kind: "scalar", T: 6 /*ScalarType.FIXED64*/ },
            { no: 3, name: "replay", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<StreamDeploymentLogsRequest>): StreamDeploymentLogsRequest {
        const message = { guildId: "0", pluginId: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamDeploymentLogsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamDeploymentLogsRequest): StreamDeploymentLogsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* fixed64 guild_id */ 1:
                    message.guildId = reader.fixed64().toString();
                    break;
                case /* fixed64 plugin_id */ 2:
                    message.pluginId = reader.fixed64().toString();
                    break;
                case /* optional bool replay */ 3:
                    message.replay = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamDeploymentLogsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* fixed64 guild_id = 1; */
        if (message.guildId !== "0")
            writer.tag(1, WireType.Bit64).fixed64(message.guildId);
        /* fixed64 plugin_id = 2; */
        if (message.pluginId !== "0")
            writer.tag(2, WireType.Bit64).fixed64(message.pluginId);
        /* optional bool replay = 3; */
        if (message.replay !== undefined)
            writer.tag(3, WireType.Varint).bool(message.replay);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.engine.v1.StreamDeploymentLogsRequest
 */
export const StreamDeploymentLogsRequest = new StreamDeploymentLogsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamDeploymentLogsResponse$Type extends MessageType<StreamDeploymentLogsResponse> {
    constructor() {
        super("kite.engine.v1.StreamDeploymentLogsResponse", [
            { no: 1, name: "entry", kind: "message", T: () => DeploymentLogEntry }
        ]);
    }
    create(value?: PartialMessage<StreamDeploymentLogsResponse>): StreamDeploymentLogsResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StreamDeploymentLogsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamDeploymentLogsResponse): StreamDeploymentLogsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* kite.engine.v1.DeploymentLogEntry entry */ 1:
                    message.entry = DeploymentLogEntry.internalBinaryRead(reader, reader.uint32(), options, message.entry);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamDeploymentLogsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* kite.engine.v1.DeploymentLogEntry entry = 1; */
        if (message.entry)
            DeploymentLogEntry.internalBinaryWrite(message.entry, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.engine.v1.StreamDeploymentLogsResponse
 */
export const StreamDeploymentLogsResponse = new StreamDeploymentLogsResponse$Type();
/**
 * @generated ServiceType for protobuf service kite.engine.v1.EngineService
 */
export const EngineService = new ServiceType("kite.engine.v1.EngineService", [
    { name: "CreateDeployment", options: {}, I: CreateDeploymentRequest, O: CreateDeploymentResponse },
    { name: "UpdateDeployment", options: {}, I: UpdateDeploymentRequest, O: UpdateDeploymentResponse },
    { name: "DeleteDeployment", options: {}, I: DeleteDeploymentRequest, O: DeleteDeploymentResponse },
    { name: "ListDeployments", options: {}, I: ListDeploymentsRequest, O: ListDeploymentsResponse },
    { name: "GetDeployment", options: {}, I: GetDeploymentRequest, O: GetDeploymentResponse },
    { name: "StreamDeploymentLogs", serverStreaming: true, options: {}, I: StreamDeploymentLogsRequest, O: StreamDeploymentLogsResponse }
]);
