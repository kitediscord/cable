// @generated by protobuf-ts 2.7.0 with parameter long_type_string
// @generated from protobuf file "kite/discord/v1/service.proto" (package "kite.discord.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Guild } from "./guild";
/**
 * @generated from protobuf message kite.discord.v1.ListGuildsRequest
 */
export interface ListGuildsRequest {
    /**
     * @generated from protobuf field: repeated fixed64 ids = 1;
     */
    ids: string[];
}
/**
 * @generated from protobuf message kite.discord.v1.ListGuildsResponse
 */
export interface ListGuildsResponse {
    /**
     * @generated from protobuf field: repeated kite.discord.v1.Guild guilds = 1;
     */
    guilds: Guild[];
}
/**
 * @generated from protobuf message kite.discord.v1.GetGuildRequest
 */
export interface GetGuildRequest {
    /**
     * @generated from protobuf field: fixed64 id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message kite.discord.v1.GetGuildResponse
 */
export interface GetGuildResponse {
    /**
     * @generated from protobuf field: kite.discord.v1.Guild guild = 1;
     */
    guild?: Guild;
}
// @generated message type with reflection information, may provide speed optimized methods
class ListGuildsRequest$Type extends MessageType<ListGuildsRequest> {
    constructor() {
        super("kite.discord.v1.ListGuildsRequest", [
            { no: 1, name: "ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 6 /*ScalarType.FIXED64*/ }
        ]);
    }
    create(value?: PartialMessage<ListGuildsRequest>): ListGuildsRequest {
        const message = { ids: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListGuildsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListGuildsRequest): ListGuildsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated fixed64 ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.ids.push(reader.fixed64().toString());
                    else
                        message.ids.push(reader.fixed64().toString());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListGuildsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated fixed64 ids = 1; */
        if (message.ids.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.ids.length; i++)
                writer.fixed64(message.ids[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.discord.v1.ListGuildsRequest
 */
export const ListGuildsRequest = new ListGuildsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListGuildsResponse$Type extends MessageType<ListGuildsResponse> {
    constructor() {
        super("kite.discord.v1.ListGuildsResponse", [
            { no: 1, name: "guilds", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Guild }
        ]);
    }
    create(value?: PartialMessage<ListGuildsResponse>): ListGuildsResponse {
        const message = { guilds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ListGuildsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListGuildsResponse): ListGuildsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated kite.discord.v1.Guild guilds */ 1:
                    message.guilds.push(Guild.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListGuildsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated kite.discord.v1.Guild guilds = 1; */
        for (let i = 0; i < message.guilds.length; i++)
            Guild.internalBinaryWrite(message.guilds[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.discord.v1.ListGuildsResponse
 */
export const ListGuildsResponse = new ListGuildsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGuildRequest$Type extends MessageType<GetGuildRequest> {
    constructor() {
        super("kite.discord.v1.GetGuildRequest", [
            { no: 1, name: "id", kind: "scalar", T: 6 /*ScalarType.FIXED64*/ }
        ]);
    }
    create(value?: PartialMessage<GetGuildRequest>): GetGuildRequest {
        const message = { id: "0" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetGuildRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGuildRequest): GetGuildRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* fixed64 id */ 1:
                    message.id = reader.fixed64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGuildRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* fixed64 id = 1; */
        if (message.id !== "0")
            writer.tag(1, WireType.Bit64).fixed64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.discord.v1.GetGuildRequest
 */
export const GetGuildRequest = new GetGuildRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGuildResponse$Type extends MessageType<GetGuildResponse> {
    constructor() {
        super("kite.discord.v1.GetGuildResponse", [
            { no: 1, name: "guild", kind: "message", T: () => Guild }
        ]);
    }
    create(value?: PartialMessage<GetGuildResponse>): GetGuildResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetGuildResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGuildResponse): GetGuildResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* kite.discord.v1.Guild guild */ 1:
                    message.guild = Guild.internalBinaryRead(reader, reader.uint32(), options, message.guild);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGuildResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* kite.discord.v1.Guild guild = 1; */
        if (message.guild)
            Guild.internalBinaryWrite(message.guild, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message kite.discord.v1.GetGuildResponse
 */
export const GetGuildResponse = new GetGuildResponse$Type();
/**
 * @generated ServiceType for protobuf service kite.discord.v1.DiscordService
 */
export const DiscordService = new ServiceType("kite.discord.v1.DiscordService", [
    { name: "ListGuilds", options: {}, I: ListGuildsRequest, O: ListGuildsResponse },
    { name: "GetGuild", options: {}, I: GetGuildRequest, O: GetGuildResponse }
]);
